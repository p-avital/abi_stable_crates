(
  cases:[
    (
      name:"struct repr attrs",
      code:r##"
          #[repr( #repr )]
          struct Foo;
      "##,
      subcase: [
        ( replacements: { "#repr":"u8" }, error_count: 1 ),
        ( replacements: { "#repr":"u16" }, error_count: 1 ),
        ( replacements: { "#repr":"u32" }, error_count: 1 ),
        ( replacements: { "#repr":"u64" }, error_count: 1 ),
        ( replacements: { "#repr":"usize" }, error_count: 1 ),
        ( replacements: { "#repr":"i8" }, error_count: 1 ),
        ( replacements: { "#repr":"i16" }, error_count: 1 ),
        ( replacements: { "#repr":"i32" }, error_count: 1 ),
        ( replacements: { "#repr":"i64" }, error_count: 1 ),
        ( replacements: { "#repr":"isize" }, error_count: 1 ),
        ( replacements: { "#repr":"transparent" }, error_count: 0 ),
        ( replacements: { "#repr":"C" }, error_count: 0 ),
        ( replacements: { "#repr":"C,align(16)" }, error_count: 0 ),
      ],
    ),
    (
      name:"union repr attrs",
      code:r##"
        #[repr( #repr )]
        struct Foo;
      "##,
      subcase: [
        ( replacements: { "#repr":"u8" }, error_count: 1 ),
        ( replacements: { "#repr":"u16" }, error_count: 1 ),
        ( replacements: { "#repr":"u32" }, error_count: 1 ),
        ( replacements: { "#repr":"u64" }, error_count: 1 ),
        ( replacements: { "#repr":"usize" }, error_count: 1 ),
        ( replacements: { "#repr":"i8" }, error_count: 1 ),
        ( replacements: { "#repr":"i16" }, error_count: 1 ),
        ( replacements: { "#repr":"i32" }, error_count: 1 ),
        ( replacements: { "#repr":"i64" }, error_count: 1 ),
        ( replacements: { "#repr":"isize" }, error_count: 1 ),
        ( replacements: { "#repr":"transparent" }, error_count: 0 ),
        ( replacements: { "#repr":"C" }, error_count: 0 ),
        ( replacements: { "#repr":"C,align(16)" }, error_count: 0 ),
      ],
    ),
    (
      name:"enum repr attrs",
      code:r##"
        #[repr(#repr)]
        enum What{
            A=10,
            B=20,
            C=30,
        }
      "##,
      subcase: [
        ( 
          replacements: { "#repr":"u8" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_u8_slice"),
            regex("__DiscriminantRepr *:: *U8"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( 
          replacements: { "#repr":"u16" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_u16_slice"),
            regex("__DiscriminantRepr *:: *U16"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( 
          replacements: { "#repr":"u32" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_u32_slice"),
            regex("__DiscriminantRepr *:: *U32"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( 
          replacements: { "#repr":"u64" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_u64_slice"),
            regex("__DiscriminantRepr *:: *U64"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( 
          replacements: { "#repr":"usize" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_usize_slice"),
            regex("__DiscriminantRepr *:: *Usize"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( 
          replacements: { "#repr":"i8" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_i8_slice"),
            regex("__DiscriminantRepr *:: *I8"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( 
          replacements: { "#repr":"i16" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_i16_slice"),
            regex("__DiscriminantRepr *:: *I16"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( 
          replacements: { "#repr":"i32" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_i32_slice"),
            regex("__DiscriminantRepr *:: *I32"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( 
          replacements: { "#repr":"i64" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_i64_slice"),
            regex("__DiscriminantRepr *:: *I64"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( 
          replacements: { "#repr":"isize" }, 
          find_all:[
            regex("__TLDiscriminants *:: *from_isize_slice"),
            regex("__DiscriminantRepr *:: *Isize"),
            str("10"),str("20"),str("30"),
          ],
          error_count: 0,
        ),
        ( replacements: { "#repr":"transparent" }, error_count: 1 ),
        ( replacements: { "#repr":"C" }, error_count: 0 ),
        ( replacements: { "#repr":"C,align(16)" }, error_count: 0 ),
      ],
    ),

    /*////////////////////////////////////////////////////////////////////////////
                      Container attributes
    
    Every attribute here should be in the same order as the documentation.
    */////////////////////////////////////////////////////////////////////////////
    (
      name:"phantom fields",
      code:r##"
        #[repr(C)]
        #[sabi(phantom_field @field1)]
        #[sabi(phantom_field @field2)]
        struct Foo;

      "##,
      subcase: [
        (
          replacements: { "@field1": "=i32", "@field2": "=what"},
          find_all: [str("expected parentheses")],
          error_count: 2,
        ),
        (
          replacements: { "@field1": "(i32)", "@field2": "(what)" }, 
          find_all: [regex("expected `:`.*expected `:`")],
          error_count: 2,
        ),
        (
          replacements: { "@field1": "(i32)", "@field2": "(a:String)" }, 
          find_all: [regex("expected `:`")],
          error_count: 1 ,
        ),
        (
          replacements: { "@field1": "(32)", "@field2": "(a:String)" },
          find_all: [str("expected identifier")],
          error_count: 1,
        ),
        // Repeated phantom field names are fine.
        ( replacements: { "@field1": "(a:u32)", "@field2": "(a:String)"}, error_count: 0 ),
      ],
    ),
    (
      name:"phantom_type_param",
      code:r##"
        #[repr(C)]
        #[sabi(phantom_type_param@phantom1)]
        #[sabi(phantom_type_param@phantom2)]
        struct Foo;
      "##,
      subcase: [
        ( replacements: { "@phantom1": "=i32", "@phantom2": "=what" }, error_count: 0 ),
        (
          replacements: { "@phantom1": "=i32", "@phantom2": "=a:String" }, 
          find_all: [str("expected `,`")],
          error_count: 1,
        ),
        ( 
          replacements: { "@phantom1": "(foo)", "@phantom2": "=a:String" },
          find_all: [str("expected `=`"), str("expected `,`")],
          error_count: 2,
        ),
        // Repeated phantom phantom names are fine.
        ( replacements: { "@phantom1": "=a:u32", "@phantom2": "=a:String" }, error_count: 2 ),
      ],
    ),
    (
      name:"phantom const param",
      code:r##"
        #[repr(C)]
        #[sabi(phantom_const_param @a1)]
        struct Foo;
      "##,
      subcase: [
        ( 
          replacements: {"@a1":r#"()"#},
          find_all: [str("expected `=`")],
          error_count: 1
        ),
        ( 
          replacements: {"@a1":r#"= foo::<2 + 2>()"#},
          find_all: [str("parsing expression")],
          error_count: 1
        ),
        ( 
          replacements: {"@a1":r#"= """#},
          find_all: [regex("expected.*StableAbi.*found.*literal")],
          error_count: 1
        ),
        ( 
          replacements: {"@a1":r#"= 1 + 1"#},
          find_all: [regex(r#"1 *\+ *1"#)],
          error_count: 0
        ),
        ( 
          replacements: {"@a1":r#"= somefunction(hello)"#},
          find_all: [regex(r#"somefunction *\( *hello *\)"#)],
          error_count: 0
        ),
      ],
    ),
    (
      name:"not_stableabi",
      code:r##"
        #[repr(C)]
        #[sabi(not_stableabi@p1)]
        #[sabi(not_stableabi@p2)]
        enum Foo<T,U,V>{
          Bar(T,U,V),
        }
      "##,
      subcase: [
        ( replacements: { "@p1":r#"(X)"#, "@p2":r#"(Y)"# }, error_count: 2 ),
        ( replacements: { "@p1":r#"T"#, "@p2":r#"U"# }, error_count: 2 ),
        ( replacements: { "@p1":r#"T"#, "@p2":r#"="U""# }, error_count: 2 ),
        ( replacements: { "@p1":r#"(T)"#, "@p2":r#"="U""# }, error_count: 1 ),
        ( replacements: { "@p1":r#"(T)"#, "@p2":r#"(U)"# }, error_count: 0 ),
      ],
    ),
    (
      name:"unsafe_unconstrained",
      code:r##"
        #[repr(C)]
        #[sabi(unsafe_unconstrained@p1)]
        #[sabi(unsafe_unconstrained@p2)]
        enum Foo<T,U,V>{
          Bar(T,U,V),
        }
      "##,
      subcase: [
        ( replacements: { "@p1":r#"(X)"#, "@p2":r#"(Y)"# }, error_count: 2 ),
        ( replacements: { "@p1":r#"T"#, "@p2":r#"U"# }, error_count: 2 ),
        ( replacements: { "@p1":r#"T"#, "@p2":r#"="U""# }, error_count: 2 ),
        ( replacements: { "@p1":r#"(T)"#, "@p2":r#"="U""# }, error_count: 1 ),
        ( replacements: { "@p1":r#"(T)"#, "@p2":r#"(U)"# }, error_count: 0 ),
      ],
    ),
    (
      name:"struct bounds",
      code:r##"
        #[repr(C)]
        #[sabi(bound@p1)]
        #[sabi(bound@p2)]
        enum Foo{
          Bar,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@p1": "(i32: Foo)", "@p2": "(String: Bar)" }, 
          find_all: [regex("i32 *: *Foo"),regex("String *: *Bar")],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1": r#"("i32: Foo")"#, "@p2": "(A: B)" }, 
          find_all: [regex("expected.*where predicate.*found.*literal")],
          error_count: 1,
        ),
        ( 
          replacements: { "@p1": "(i32: Foo)", "@p2": " String: Bar" }, 
          find_all: [regex("expected.*parentheses")],
          error_count: 1,
        ),
        ( 
          replacements: { "@p1": "()", "@p2": "= String: Bar" }, 
          find_all: [
              regex("parsing where predicate"),
              regex("expected.*parentheses"),
          ],
          error_count: 2,
        ),
      ],
    ),
    (
      name:"field bound",
      code:r##"
        #[repr(C)]
        struct Foo{
          #[sabi(@p1)]
          hello: String,
          #[sabi(@p2)]
          hello: Nope,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@p1": "bound = Debug", "@p2": "bound= Display" }, 
          find_all: [regex("String *: *Debug"),regex("Nope *: *Display")],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1": "bound =" , "@p2": "" }, 
          find_all: [regex("type bounds.*empty")],
          error_count: 1,
        ),
        ( 
          replacements: { "@p1": "bound=" , "@p2": "bound=" }, 
          find_all: [regex("type bounds.*empty")],
          error_count: 2,
        ),
      ],
    ),
    (
      name:"generated prefix type names",
      code:r##"
        #[repr(C)]
        #[sabi(kind(Prefix(@p)))]
        struct Foo{
          x:u32,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@p":r#""# }, 
          find_all: [regex(r#"struct *Foo_Prefix *\{"#), regex(r#"struct *Foo_Ref *\("#)],
          error_count: 0,
        ),
        ( 
          replacements: { "@p":r#"prefix_ref = Hello "# }, 
          find_all: [regex(r#"struct *Foo_Prefix *\{"#), regex(r#"struct *Hello *\("#)],
          error_count: 0,
        ),
        ( 
          replacements: { "@p":r#"prefix_ref = Hello, prefix_fields = World "# }, 
          find_all: [regex(r#"struct *World *\{"#), regex(r#"struct *Hello *\("#)],
          error_count: 0,
        ),
        ( 
          replacements: { "@p":r#"prefix_ref = "Hello" "# }, 
          find_all: [str(r#"expected identifier"#)],
          error_count: 1,
        ),
        ( 
          replacements: { "@p":r#"prefix_fields = "Hello" "# }, 
          find_all: [str(r#"expected identifier"#)],
          error_count: 1,
        ),
      ],
    ),
    (
      name:"prefix_bound",
      code:r##"
        #[repr(C)]
        #[sabi(prefix_bound@p1)]
        #[sabi(prefix_bound@p2)]
        #[sabi(kind(Prefix(prefix_ref = VecVTable)))]
        struct Foo{
          x:u32,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@p1": "(i32: Foo)", "@p2": "(String: Bar)" }, 
          find_all: [regex("i32 *: *Foo"),regex("String *: *Bar")],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1": "(i32: Foo)", "@p2": "=String:Bar" }, 
          find_all: [str("expected parentheses")],
          error_count: 1,
        ),
        ( 
          replacements: { "@p1": "()", "@p2": "=(String:Bar)" }, 
          find_all: [regex("parsing.*where predicate"), str("expected parentheses")],
          error_count: 2,
        ),
      ],
    ),
    (
      name:"prefix_bounds",
      code:r##"
        #[repr(C)]
        #[sabi(prefix_bounds@p1)]
        #[sabi(kind(Prefix(prefix_ref = VecVTable)))]
        struct Foo{
          x:u32,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@p1": "()" }, 
          error_count: 0,
        ),
        ( 
          replacements: { "@p1": "(i32: Foo)" }, 
          find_all: [regex("i32 *: *Foo")],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1": "(i32: Foo, u32: Bar)" }, 
          find_all: [regex("i32 *: *Foo"),regex("u32 *: *Bar")],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1": "=(i32: Foo)" }, 
          find_all: [str("expected parentheses")],
          error_count: 1,
        ),
        ( 
          replacements: { "@p1": "(Foo)" }, 
          find_all: [regex("parsing.*where predicates")],
          error_count: 1,
        ),
      ],
    ),
    (
      name:"tags",
      code:r##"
          #[repr(C)]
          #[sabi( @tag1 )]
          #[sabi( @tag2 )]
          struct Foo;
      "##,
      subcase: [
        ( 
          replacements: { "@tag1": "tag = tag![[0]]", "@tag2": "" }, 
          find_all: [regex( r#"tag *! *\[ *\[ *0 *\] *\]"#)],
          error_count: 0
        ),
        ( 
          replacements: { "@tag1": "", "@tag2": " tag = tag![[0]] " }, 
          find_all: [regex( r#"tag *! *\[ *\[ *0 *\] *\]"#)],
          error_count: 0
        ),
        ( 
          replacements: { "@tag1": "tag = tag![[0]]", "@tag2": "tag = tag![[0]]" }, 
          error_count: 1
        ),
        ( 
          replacements: { "@tag1": "tag=100", "@tag2": "" }, 
          find_all: [regex( r#"expected.*Tag.*found.*literal"#)],
          error_count: 1
        ),
        ( 
          replacements: { "@tag1": "tag()", "@tag2": "tag = tag![[0]]" }, 
          error_count: 1
        ),
      ],
    ),
    (
      name:"extra_checks",
      code:r##"
          #[repr(C)]
          #[sabi( @ec1 )]
          #[sabi( @ec2 )]
          struct Foo;
      "##,
      subcase: [
        ( 
          replacements: { "@ec1": "extra_checks = aaa", "@ec2": "" }, 
          find_all: [str("aaa")],
          error_count: 0
        ),
        ( 
          replacements: { "@ec1": "", "@ec2": " extra_checks = aaa " }, 
          find_all: [str("aaa")],
          error_count: 0
        ),
        ( 
          replacements: { "@ec1": "", "@ec2": r#" extra_checks = "" "# }, 
          find_all: [regex("expected.*found.*literal")],
          error_count: 1
        ),
        ( 
          replacements: { "@ec1": "extra_checks = aaa ", "@ec2": "extra_checks = b" }, 
          find_all: [regex("cannot.*use.*attribute.*(twice|times)")],
          error_count: 1
        ),
        ( 
          replacements: { "@ec1": "extra_checks(b)", "@ec2": "" }, 
          find_all: [str("expected `=`")],
          error_count: 1
        ),
      ],
    ),
    (
      name:"module_reflection",
      code:r##"
        #[repr(C)]
        #[sabi(module_reflection@mr1)]
        #[sabi(@mr2)]
        struct Foo;
      "##,
      subcase: [
        ( replacements: { "@mr1":r#"(qweqw)"#, "@mr2":r#""# }, error_count: 1 ),
        ( replacements: { "@mr1":r#"(Module)"#, "@mr2":r#""# }, error_count: 0 ),
        ( 
          replacements: { "@mr1":r#"(Module)"#, "@mr2":r#"module_reflection(Opaque)"# }, 
          find_all: [str("multiple times")],
          error_count: 1
        ),
        ( replacements: { "@mr1":r#"(Opaque)"#, "@mr2":r#""# }, error_count: 0 ),
        ( replacements: { "@mr1":r#"(Deref)"#, "@mr2":r#""# }, error_count: 0 ),
      ],
    ),
    (
      name:"impl_InterfaceType",
      code:r##"
        #[repr(C)]
        #[sabi(impl_InterfaceType@II1)]
        #[sabi(@II2)]
        struct Foo;
      "##,
      subcase: [
        ( replacements: { "@II1":r#"()"#, "@II2":r#""# }, error_count: 0 ),
        ( replacements: { "@II1":r#"="""#, "@II2":r#""# }, error_count: 1 ),
        ( replacements: { "@II1":r#"(Debug,Display)"#, "@II2":r#""# }, error_count: 0 ),
        ( replacements: { "@II1":r#"(Debug,whoot,Display)"#, "@II2":r#""# }, error_count: 1 ),
        ( 
          replacements: { "@II1":r#"()"#, "@II2":r#"impl_InterfaceType()"# }, 
          find_all: [str("multiple times")],
          error_count: 1
        ),
        ( 
          replacements: { "@II1":r#"(aaaaa)"#, "@II2":r#"impl_InterfaceType()"# }, 
          error_count: 1
        ),
      ],
    ),
    /*////////////////////////////////////////////////////////////////////////////
                      Field attributes
    
    Every attribute here should be in the same order as the documentation.
    */////////////////////////////////////////////////////////////////////////////
    (
      name:"rename struct fields",
      code:r##"
        #[repr(C)]
        struct Foo{
          #[sabi(@ra1)]
          a:u32,
          #[sabi(@ra2)]
          b:u64,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@ra1": "rename = nope ", "@ra2": "" },
          find_all: [str("nope;b")],
          error_count: 0 
        ),
        ( 
          replacements: { "@ra1": "", "@ra2": "rename = pops" },
          find_all: [str("a;pops")],
          error_count: 0 
        ),
        ( 
          replacements: { "@ra1": "rename = nope", "@ra2": "rename = pops" },
          find_all: [str("nope;pops")],
          error_count: 0 
        ),
        ( 
          replacements: { "@ra1": r#"rename="" "#, "@ra2": "" },
          find_all: [str("expected identifier")],
          error_count: 1
        ),
        ( 
          replacements: { "@ra1": "rename =", "@ra2": "" },
          find_all: [str("expected identifier")],
          error_count: 1
        ),
        ( 
          replacements: { "@ra1": r#"rename("nope") "#, "@ra2": "rename = pops" },
          find_all: [str("expected `=`")],
          error_count: 1 
        ),
        ( 
          replacements: { "@ra1": "", "@ra2": "rename(pops)" },
          find_all: [str("expected `=`")],
          error_count: 1 
        ),
      ],
    ),
    (
      name:"rename enum fields",
      code:r##"
        #[repr(C)]
        enum Foo{
          Variant0(
            #[sabi(@ra1)]
            u32
          ),
          Variant1{
            #[sabi(@ra2)]
            what:u64
          }
        }
      "##,
      subcase: [
        ( 
          replacements: { "@ra1": "rename = nope", "@ra2": "" },
          find_all: [str("nope;what")],
          error_count: 0 
        ),
        ( 
          replacements: { "@ra1": "", "@ra2": "rename = pops" },
          find_all: [str("0;pops")],
          error_count: 0 
        ),
        ( 
          replacements: { "@ra1": "rename = nope", "@ra2": "rename = pops" },
          find_all: [str("nope;pops")],
          error_count: 0 
        ),
        ( 
          replacements: { "@ra1": "rename(nope) ", "@ra2": "rename = pops" },
          find_all: [str("expected `=`")],
          error_count: 1
        ),
        ( 
          replacements: { "@ra1": r#"rename = "" "#, "@ra2": "" },
          find_all: [str("identifier")],
          error_count: 1
        ),
        ( 
          replacements: { "@ra1": "rename = ", "@ra2": "" },
          find_all: [str("identifier")],
          error_count: 1
        ),
      ],
    ),
    (
      name:"unsafe_change_type",
      code:r##"
        #[repr(C)]
        struct Foo{
          #[sabi(unsafe_change_type@uct1)]
          a:u32,
          #[sabi(@uct2)]
          b:u64,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@uct1": "= MyType", "@uct2": "" },
          find_all: [str("MyType"),str("u64"),not(str("u32"))],
          error_count: 0 
        ),
        (
          replacements: { "@uct1": "= MyType", "@uct2": "unsafe_change_type = YourType" },
          find_all: [str("MyType"),str("YourType"),not(regex("< *u32 *>")),not(regex("< *u64 *>"))],
          error_count: 0 
        ),
        ( 
          replacements: { "@uct1": "=", "@uct2": "" },
          find_all: [str("parsing type")],
          error_count: 1
        ),
        ( 
          replacements: { "@uct1": "(MyType) ", "@uct2": "" },
          find_all: [str("expected `=`")],
          error_count: 1
        ),
      ],
    ),
    (
      name:"unsafe_opaque_field",
      code:r##"
        #[repr(C)]
        struct Foo{
          #[sabi(@uct1)]
          a:MyString,
          #[sabi(@uct2)]
          b:Vec,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@uct1":r#"unsafe_opaque_field"#, "@uct2":r#""# },
          find_all: [str("OPAQUE_FIELD")],
          error_count: 0
        ),
        ( 
          replacements: { "@uct1":r#""#, "@uct2":r#""# },
          find_all: [not(str("OPAQUE_FIELD"))],
          error_count: 0
        ),
      ],
    ),
    (
      name:"prefix type field bound",
      code:r##"
        #[repr(C)]
        #[sabi(kind(Prefix(prefix_ref = VecVTable)))]
        struct Foo{
          #[sabi(accessor_bound@b1)]
          hello:Vec
        }
      "##,
      subcase: [
        ( 
          replacements: { "@b1": r#"="1000""# },
          find_all: [regex( r#"expected.*bound.*found.*literal"#)],
          error_count: 1
        ),
        ( 
          replacements: { "@b1": "()" },
          find_all: [str("expected `=`")],
          error_count: 1
        ),
        ( 
          replacements: { "@b1": "= Debug" },
          find_all: [regex(r#"Vec *: *Debug"#)],
          error_count: 0
        ),
      ],
    ),
    (
      name:"replace docs",
      code:r##"
        #[repr(C)]
        #[sabi(kind(Prefix(prefix_ref = Foo_Ref, @a)))]
        pub struct Foo{
          hello:Vec
        }
      "##,
      subcase: [
        ( 
          replacements: { "@a": r#""# },
          find_all: [str("pointer to the prefix"), str("generated doc")],
          error_count: 0
        ),
        ( 
          replacements: { "@a": r#" prefix_ref_docs = "hello world 324234234" "# },
          find_all: [
            regex(r#"doc *= *"hello world 324234234""#),
            not(str("pointer to the prefix")), 
          ],
          error_count: 0
        ),
        ( 
          replacements: {
            "@a": r#"
              prefix_ref_docs = "hello world 324234234",
              prefix_ref_docs = "foo bar 324234234",
            "# 
          },
          find_all: [
            regex(r#"doc *= *"hello world 324234234""#),
            regex(r#"doc *= *"foo bar 324234234""#),
            not(str("pointer to the prefix")), 
          ],
          error_count: 0
        ),
      ],
    ),
    (
      name:"last_prefix_field",
      code:r##"
        #[repr(C)]
        #[sabi(@a1)]
        struct Foo{
          #[sabi(@b1)]
          hello:Vec
        }
      "##,
      subcase: [
        ( 
          replacements: { "@a1":r#""#, "@b1":r#"last_prefix_field"# },
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#"kind(Prefix(prefix_ref = AAAA))"#,
            "@b1":r#"last_prefix_field"# 
          },
          error_count: 0
        ),
        ( 
          replacements: { "@a1":r#""#, "@b1":r#""# },
          error_count: 0
        ),
      ],
    ),
    (
      name:"accessible_if",
      code:r##"
        #[repr(C)]
        #[sabi(@a1)]
        struct Foo{
          #[sabi(accessible_if@b1)]
          hello:Vec
        }
      "##,
      subcase: [
        ( 
          replacements: { "@a1":r#""#, "@b1":r#" = "false" "# },
          find_all: [regex( r#"expected.*bool.*found.*literal"#)],
          error_count: 1
        ),
        ( 
          replacements: { "@a1":r#""#, "@b1":r#" = false "# },
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#"kind(Prefix(prefix_ref = AAAA))"#,
            "@b1":r#" = true && false "# 
          },
          find_all: [regex(r#"true *&& *false"#)],
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#"kind(Prefix(prefix_ref = AAAA))"#,
            "@b1":r#" = <TypeParameter as Trait>::CONSTANT "# 
          },
          find_all: [regex(r#"< *TypeParameter +as +Trait *> *:: *CONSTANT"#)],
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#"kind(Prefix(prefix_ref = AAAA))"#,
            "@b1":r#" = "" "# 
          },
          find_all: [regex( r#"expected.*bool.*found.*literal"#)],
          error_count: 1
        ),
        ( 
          replacements: {
            "@a1":r#"kind(Prefix(prefix_ref = AAAA))"#,
            "@b1":r#"()"# 
          },
          find_all: [str("expected `=`")],
          error_count: 1
        ),
        ( 
          replacements: {
            "@a1":r#"kind(Prefix(prefix_ref = AAAA))"#,
            "@b1":r#""# 
          },
          find_all: [str("expected `=`")],
          error_count: 1
        ),
      ],
    ),
    (
      name:"pub_getter",
      code:r##"
        #[repr(C)]
        struct Foo{
          #[sabi(refl(pub_getter@b1))]
          hello:Vec
        }
      "##,
      subcase: [
        ( 
          replacements: { "@b1":r#"= hello "# },
          error_count: 0
        ),
        ( 
          replacements: { "@b1":r#"="hello::<>" "# },
          find_all: [str("expected identifier")],
          error_count: 1
        ),
        ( 
          replacements: { "@b1":r#"="" "# },
          find_all: [str("expected identifier")],
          error_count: 1
        ),
        ( 
          replacements: { "@b1":r#"()"# },
          find_all: [str("expected `=`")],
          error_count: 1
        ),
      ],
    ),

    /*////////////////////////////////////////////////////////////////////////////
                      Field or Container attributes
    
    Every attribute here should be in the same order as the documentation.
    */////////////////////////////////////////////////////////////////////////////
    (
      name:"missing_field non-prefix",
      code:r##"
        #[repr(C)]
        #[sabi(@a1)]
        struct Foo{
          #[sabi(missing_field@b1)]
          #[sabi(@b2)]
          hello:Vec
        }
      "##,
      subcase: [
        ( 
          replacements: { "@a1":r#""#, "@b1":r#"(panic)"#, "@b2":r#""# },
          error_count: 0
        ),
      ]
    ),
    (
      name:"missing_field prefix",
      code:r##"
        #[repr(C)]
        #[sabi(kind(Prefix(prefix_ref = AAAA)))]
        #[sabi(@a1)]
        struct Foo{
          #[sabi(missing_field@b1)]
          #[sabi(@b2)]
          hello:Vec
        }
      "##,
      subcase: [
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(panic)"# ,
            "@b2":r#""#,
          },
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(option)"# ,
            "@b2":r#""#,
          },
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(default)"# ,
            "@b2":r#""#,
          },
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(asdsadas)"# ,
            "@b2":r#""#,
          },
          find_all: [str("attribute")],
          error_count: 1
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(option)"# ,
            "@b2":r#"missing_field(option)"#,
          },
          find_all: [str("multiple times")],
          error_count: 1
        ),
        ( 
          replacements: { 
            "@a1":r#"
              missing_field(option),
              missing_field(option),
            "#,
            "@b1":r#"(option)"# ,
            "@b2":r#""#,
          },
          find_all: [str("multiple times")],
          error_count: 1
        ),

        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(with = somefunction)"# ,
            "@b2":r#""#,
          },
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(with())"# ,
            "@b2":r#""#,
          },
          find_all: [str("expected `=`")],
          error_count: 1
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(with="")"# ,
            "@b2":r#""#,
          },
          find_all: [str("identifier")],
          error_count: 1
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(with="asasd asd")"# ,
            "@b2":r#""#,
          },
          find_all: [str("identifier")],
          error_count: 1
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(with = somefunction)"# ,
            "@b2":r#""#,
          },
          error_count: 0
        ),

        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(value="2+2")"# ,
            "@b2":r#""#,
          },
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(value())"# ,
            "@b2":r#""#,
          },
          find_all: [str("expected `=`")],
          error_count: 1
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(value = foo::<2 + 2>())"# ,
            "@b2":r#""#,
          },
          find_all: [str("parsing expression")],
          error_count: 1
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(value="")"# ,
            "@b2":r#""#,
          },
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(value = 1 + 1)"# ,
            "@b2":r#""#,
          },
          error_count: 0
        ),
        ( 
          replacements: { 
            "@a1":r#""#,
            "@b1":r#"(value = somefunction(hello))"# ,
            "@b2":r#""#,
          },
          error_count: 0
        ),

        
      ],
    ),
    ///////////////////////////
    (
      name:"with_constructor exhaustive",
      code:r##"
        #[repr(C)]
        #[sabi(@p1)]
        enum Foo<T,U,V>{
          #[sabi(@f1)]
          Bar,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@p1":r#""#, "@f1":r#""# },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1":r#"with_constructor"#, "@f1":r#""# },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1":r#""#, "@f1":r#"with_constructor"# },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1":r#"with_constructor"#, "@f1":r#"with_constructor"# },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"with_boxed_constructor exhaustive",
      code:r##"
        #[repr(C)]
        #[sabi(@p1)]
        enum Foo<T,U,V>{
          #[sabi(@f1)]
          Bar,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@p1":r#""#, "@f1":r#""# },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1":r#"with_boxed_constructor"#, "@f1":r#""# },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1":r#""#, "@f1":r#"with_boxed_constructor"# },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1":r#"with_boxed_constructor"#, "@f1":r#"with_boxed_constructor"# },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"with_constructor nonexhaustive",
      code:r##"
        #[repr(C)]
        #[sabi(kind(WithNonExhaustive( size = @s, traits() )))]
        #[sabi(@p1)]
        enum Foo<T,U,V>{
          #[sabi(@f1)]
          Bar,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@s": r#""[usize;10]""#, "@p1": "", "@f1":"" },
          find_all: [regex("expected.*type.*found.*literal")],
          error_count: 1,
        ),
        ( 
          replacements: { "@s": "[usize;10]", "@p1": "", "@f1":"" },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
        ( 
          replacements: { "@s": "[usize;10]", "@p1": "with_constructor", "@f1": "" },
          find_all: [str("fn Bar_NE")],
          error_count: 0,
        ),
        ( 
          replacements: { "@s": "[usize;10]", "@p1": "", "@f1": "with_constructor" },
          find_all: [str("fn Bar_NE")],
          error_count: 0,
        ),
        ( 
          replacements: { "@s": "[usize;10]", "@p1": "with_constructor", "@f1": "with_constructor" },
          find_all: [str("fn Bar_NE")],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"with_boxed_constructor nonexhaustive",
      code:r##"
        #[repr(C)]
        #[sabi(kind(WithNonExhaustive(size = [usize;10], traits() )))]
        #[sabi(@p1)]
        enum Foo<T,U,V>{
          #[sabi(@f1)]
          Bar,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@p1":r#""#, "@f1":r#""# },
          find_all: [not(str("Bar_NE"))],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1":r#"with_boxed_constructor"#, "@f1":r#""# },
          find_all: [str("fn Bar_NE")],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1":r#""#, "@f1":r#"with_boxed_constructor"# },
          find_all: [str("fn Bar_NE")],
          error_count: 0,
        ),
        ( 
          replacements: { "@p1":r#"with_boxed_constructor"#, "@f1":r#"with_boxed_constructor"# },
          find_all: [str("fn Bar_NE")],
          error_count: 0,
        ),
      ],
    ),

    (
      name:"macros",
      code:r##"
          #[repr(C)]
          #[sabi(#attr)]
          struct Foo{
            huh:#ty
          }
      "##,
      subcase: [
        ( 
          replacements: { "#ty":"()","#attr":"" },
          error_count: 0
        ),
        ( 
          replacements: { "#ty":"T!()","#attr":"" },
          error_count: 1
        ),
        ( 
          replacements: { "#ty":"T!()","#attr":"unsafe_allow_type_macros" }, 
          error_count: 0
        ),
      ],
    ),
    /*////////////////////////////////////////////////////////////////////////////
                #[sabi(kind(WithNonExhaustive()))] attribute
    
    Every attribute here should be in the same order as the documentation.
    *///////////////////////////////////////////////////////////////////////////// 
    (
      name:"with_boxed_constructor nonexhaustive",
      code:r##"
        #[repr(C)]
        #[sabi(kind(WithNonExhaustive( size@size, @p1 )))]
        enum Foo<T,V>{
          Bar,
        }
      "##,
      subcase: [
        ( 
          replacements: { "@size":r#""#, "@p1":r#""# },
          find_all: [str("expected `=`")],
          error_count: 1,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#""# },
          find_all: [str("100")],
          error_count: 0,
        ),
        ( 
          replacements: { "@size":r#" = MyString "#, "@p1":r#""# },
          find_all: [str("MyString")],
          error_count: 0,
        ),

        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"align"# },
          find_all: [str("expected `=`")],
          error_count: 1,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"align=200"# },
          find_all: [str("200")],
          error_count: 0,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"align="MyVec" "# },
          find_all: [regex("expected.*type.*found.*literal")],
          error_count: 1,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"align=MyVec "# },
          find_all: [str("MyVec")],
          error_count: 0,
        ),
        
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"interface"# },
          find_all: [str("expected `=`")],
          error_count: 1,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"interface() "# },
          find_all: [str("expected `=`")],
          error_count: 1,
        ),
        (
          replacements: { "@size":r#"=100"#, "@p1":r#"interface= "# },
          find_all: [str("expected")],
          error_count: 1,
        ),
        (
          replacements: { "@size":r#"=100"#, "@p1":r#"interface = "FooInterface::<T>" "# },
          find_all: [regex("expected.*type.*found.*literal")],
          error_count: 1,
        ),
        (
          replacements: { "@size":r#"=100"#, "@p1":r#"interface = FooInterface::<T> "# },
          find_all: [regex("DefaultInterface *= *FooInterface *:: *< *T *>")],
          error_count: 0,
        ),

        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"traits"# },
          find_all: [str("expected")],
          error_count: 1,
        ),
        (
          replacements: { "@size":r#"=100"#, "@p1":r#"traits="" "# },
          find_all: [str("expected")],
          error_count: 1,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"traits() "# },
          find_all: [],
          error_count: 0,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"traits(Debug,Display) "# },
          find_all: [],
          error_count: 0,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"traits("Debug",Display) "# },
          find_all: [str("expected identifier")],
          error_count: 1,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"traits(Debug,foobar) "# },
          find_all: [str("trait")],
          error_count: 1,
        ),
        ( 
          replacements: { 
            "@size":r#"=100"#,
            "@p1":r#"traits(Debug), interface = foo "# 
          },
          find_all: [str("both")],
          error_count: 1,
        ),
        ( 
          replacements: { 
            "@size":r#"=100"#,
            "@p1":r#"interface=foo, traits(Debug) "# 
          },
          find_all: [str("both")],
          error_count: 1,
        ),
        
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"assert_nonexhaustive"# },
          find_all: [str("expected")],
          error_count: 1,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"assert_nonexhaustive = MyStr "# },
          find_all: [str("MyStr")],
          error_count: 0,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"assert_nonexhaustive = "MyStr" "# },
          find_all: [str("expected")],
          error_count: 1,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"assert_nonexhaustive() "# },
          error_count: 0,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"assert_nonexhaustive(MyVec, MyStr) "# },
          find_all: [str("MyVec"),str("MyStr")],
          error_count: 0,
        ),
        ( 
          replacements: { "@size":r#"=100"#, "@p1":r#"assert_nonexhaustive("MyVec", "MyStr") "# },
          find_all: [regex("expected.*type.*found.*literal")],
          error_count: 1,
        ),
        
      ],
    ),
    
    /*////////////////////////////////////////////////////////////////////////////
                    function pointer qualifiers
    *///////////////////////////////////////////////////////////////////////////// 
    (
      name:"Max unique lifetime parameters",
      code:r##"
          #[repr(C)]
          struct Foo{
            func: #qualif fn(),
          }
      "##,
      subcase: [
        ( replacements: { "#qualif":r#"extern "C" "# }, error_count: 0),
        ( replacements: { "#qualif":r#"unsafe extern "C" "# }, error_count: 0),
        ( replacements: { "#qualif":r#"extern "Rust" "# }, error_count: 1),
        ( replacements: { "#qualif":r#"unsafe extern "Rust" "# }, error_count: 1),
        ( replacements: { "#qualif":r#""# }, error_count: 1 ),
        ( replacements: { "#qualif":r#"unsafe "# }, error_count: 1 ),
        ( replacements: { "#qualif":r#"const "# }, error_count: 1 ),
        ( replacements: { "#qualif":r#"const extern "C" "# }, error_count: 1 ),
        ( replacements: { "#qualif":r#"const unsafe extern "C" "# }, error_count: 1 ),
      ],
    ),

    /*////////////////////////////////////////////////////////////////////////////
              Stuff that should error because it goes over some limit
    *///////////////////////////////////////////////////////////////////////////// 
    (
      name:"Max unique lifetime parameters",
      code:r##"
          #[repr(C)]
          struct Foo{
            func:for<'a,'b,'c,'d,'e,'f,'g,'h,'i,'j,'k,'l,'m,'n> 
              extern "C" fn(
                  &'a (),&'a (),
                  &'b (),&'b (),
                  &'c (),&'c (),
                  &'d (),&'d (),
                  &'e (),&'e (),
                  &'f (),&'f (),
                  &'g (),&'g (),
                  &'h (),&'h (),
                  &'i (),&'i (),
                  &'j (),&'j (),
                  &'k (),&'k (),
                  &'l (),&'l (),
                  &'m (),&'m (),
                  &'#lt (),&'#lt (),
              ),
          }
      "##,
      subcase: [
        ( replacements: { "#lt":"n" }, error_count: 1 ),
        ( replacements: { "#lt":"m" }, error_count: 0 ),
      ],
    ),
    (
      name:"Max field ident length",
      code:r##"
          #[repr(C)]
          struct Foo{
            typetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetype#name:(),
          }
      "##,
      subcase: [
        ( replacements: { "#name":"type" }, error_count: 1  ),
        ( replacements: { "#name":"typ" }, error_count: 0 ),
      ],
    ),
    (
      name:"Max func ident length",
      code:r##"
          #[repr(C)]
          struct Foo{
            typetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetypetype#name:extern "C" fn(),
          }
      "##,
      subcase: [
        ( replacements: { "#name":"type" }, error_count: 1 ),
        ( replacements: { "#name":"typ" }, error_count: 0 ),
      ],
    ),
    (
      name:"Max lifetime parameter count struct",
      code:r##"
          #[repr(C)]
          struct Foo<
            'aa,'ab,'ac,'ad,'ae,'af,'ag,'ah,'ai,'aj,'ak,'al,'am,#p0
          >(
            &'aa(),&'ab(),&'ac(),&'ad(),&'ae(),&'af(),&'ag(),&'ah(),
            &'ai(),&'aj(),&'ak(),&'al(),&'am(),#f0
          );
      "##,
      subcase: [
        ( replacements: { "#p0":"'an,","#f0":"&'an()," }, error_count: 1 ),
        ( replacements: { "#p0":"","#f0":"" }, error_count: 0 ),
      ],
    ),
    (
      name:"Max lifetime parameter count fn pointer",
      code:r##"
          #[repr(C)]
          struct Foo(
            for<'aa,'ab,'ac,'ad,'ae,'af,'ag,'ah,'ai,'aj,'ak,'al,'am,#p0>
              extern "C" fn(
                &'aa(),&'ab(),&'ac(),&'ad(),&'ae(),&'af(),&'ag(),&'ah(),
                &'aa(),&'ab(),&'ac(),&'ad(),&'ae(),&'af(),&'ag(),&'ah(),
                &'ai(),&'aj(),&'ak(),&'al(),&'am(),#f0
                &'ai(),&'aj(),&'ak(),&'al(),&'am(),#f0
              )
          );
      "##,
      subcase: [
        ( replacements: { "#p0":"'an,","#f0":"&'an()," }, error_count: 1 ),
        ( replacements: { "#p0":"","#f0":"" }, error_count: 0 ),
      ],
    ),
    (
      name:"Max lifetime parameter count both",
      code:r##"
          #[repr(C)]
          struct Foo<'aa,'ab,'ac,'ad,'ae,'af,'ag,'ah,>(
              &'aa(),&'ab(),&'ac(),&'ad(),&'ae(),&'af(),&'ag(),&'ah(),
              for<'ai,'aj,'ak,'al,'am,#p0>
              extern "C" fn(
                &'ai(),&'aj(),&'ak(),&'al(),&'am(),#f0
                &'ai(),&'aj(),&'ak(),&'al(),&'am(),#f0
              )
          );
      "##,
      subcase: [
        ( replacements: { "#p0":"'an,","#f0":"&'an()," }, error_count: 1 ),
        ( replacements: { "#p0":"","#f0":"" }, error_count: 0 ),
      ],
    ),
  ]
)
